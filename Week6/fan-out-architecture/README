# üìå Image Upload Notification and Processing System

## üìñ Overview
This architecture implements an **event-driven image upload pipeline** using **Amazon S3, SNS, SQS, EC2, and DynamoDB**.  
The goal is to **notify users when an image is uploaded** and to **process metadata asynchronously**.

---
## üìä Architecture Diagram

![Architecture Diagram](fan-out-architecture.png)
---
## üèóÔ∏è Architecture Components

1. **Actor (User)**  
     - Uploads an image to an **Amazon S3 bucket**.

2. **Amazon S3 (Simple Storage Service)**  
     - Stores the uploaded image.  
     - Triggers an event notification when a new image is uploaded.

3. **Amazon SNS (Simple Notification Service) Topic**  
     - Receives the S3 event.  
     - Broadcasts the event to multiple subscribers:  
       - **Email Notification (Gmail):** Sends an alert about the new image.  
       - **Amazon SQS Queue:** Stores the message for downstream processing.

4. **Amazon SQS (Simple Queue Service)**  
     - Holds messages from SNS.  
     - Decouples the event source (S3) from the consumer (EC2 app).  
     - Ensures reliable delivery even if the consumer is temporarily unavailable.

5. **two Amazon EC2 Instances**  
     - **EC2 Instance 1:** Web server hosting a simple React.js application that uses the AWS SDK (`@aws-sdk/client-s3`) to handle image uploads to S3.  
     - **EC2 Instance 2:** Application server running Celery background workers to pull SQS messages and process image metadata, plus API endpoints for image operations:
          - `GET /images` - List all images metadata
          - `GET /image/{image-id}` - Get specific image details
          - Additional REST API endpoints for image management

6. **Amazon DynamoDB**  
     - A NoSQL database storing image metadata.  
     - Enables fast retrieval of image details (e.g., queries by uploader or timestamp).

---

## ‚öôÔ∏è Workflow

1. A **user uploads an image** to an S3 bucket.  
2. S3 triggers an event ‚Üí publishes a message to the **SNS Topic**.  
3. SNS fan-outs the event to subscribers:  
     - **Email (Gmail):** Immediate user notification.  
     - **SQS Queue:** For backend processing.  
4. The **EC2 Python app** polls messages from SQS:  
     - Reads the message.  
     - Extracts metadata.  
     - Stores the metadata in **DynamoDB**.  
5. **DynamoDB** keeps structured records of all uploaded images.

---

## üåü Benefits

- **Decoupling:** SQS ensures producers and consumers operate independently.  
- **Scalability:** Multiple consumers can process messages in parallel.  
- **Reliability:** No messages are lost if the consumer is offline.  
- **Event-driven:** Automated pipeline triggered by image uploads.  
- **Real-time notifications:** Users receive instant email alerts.

## üõ†Ô∏è Implementation Steps

### 1. **Set up AWS Infrastructure**

#### **Create S3 Bucket**
```bash
aws s3 mb s3://your-image-upload-bucket
```

#### **Create SNS Topic**
```bash
aws sns create-topic --name ImageUploadNotifications
```

#### **Create SQS Queue**
```bash
aws sqs create-queue --queue-name image-processing-queue
```

#### **Subscribe SQS to SNS**
```bash
aws sns subscribe --topic-arn arn:aws:sns:region:account:ImageUploadNotifications \
      --protocol sqs --notification-endpoint arn:aws:sqs:region:account:image-processing-queue
```

#### **Create DynamoDB Table**
```bash
aws dynamodb create-table \
      --table-name ImageMetadata \
      --attribute-definitions AttributeName=ImageId,AttributeType=S \
      --key-schema AttributeName=ImageId,KeyType=HASH \
      --billing-mode PAY_PER_REQUEST
```

### 2. **IAM Roles and Instance Profiles**

#### **EC2 Instance 1 IAM Role (Upload Service)**
```json
{
      "Version": "2012-10-17",
      "Statement": [
            {
                    "Effect": "Allow",
                    "Action": [
                          "s3:PutObject",
                          "s3:PutObjectAcl"
                    ],
                    "Resource": "arn:aws:s3:::your-image-upload-bucket/*"
            }
      ]
}
```

#### **EC2 Instance 2 IAM Role (Processing Service)**
```json
{
      "Version": "2012-10-17",
      "Statement": [
            {
                    "Effect": "Allow",
                    "Action": [
                          "sqs:ReceiveMessage",
                          "sqs:DeleteMessage",
                          "sqs:GetQueueAttributes"
                    ],
                    "Resource": "arn:aws:sqs:region:account:image-processing-queue"
            },
            {
                    "Effect": "Allow",
                    "Action": [
                          "dynamodb:PutItem",
                          "dynamodb:GetItem",
                          "dynamodb:UpdateItem"
                    ],
                    "Resource": "arn:aws:dynamodb:region:account:table/ImageMetadata"
            }
      ]
}
```

#### **Create IAM Roles**
```bash
# Upload Service Role
aws iam create-role --role-name ImageUploadServiceRole \
      --assume-role-policy-document '{
            "Version": "2012-10-17",
            "Statement": [{
                    "Effect": "Allow",
                    "Principal": {"Service": "ec2.amazonaws.com"},
                    "Action": "sts:AssumeRole"
            }]
      }'

aws iam put-role-policy --role-name ImageUploadServiceRole \
      --policy-name S3UploadPolicy \
      --policy-document file://upload-service-policy.json

# Processing Service Role  
aws iam create-role --role-name ImageProcessingServiceRole \
      --assume-role-policy-document '{
            "Version": "2012-10-17",
            "Statement": [{
                    "Effect": "Allow",
                    "Principal": {"Service": "ec2.amazonaws.com"},
                    "Action": "sts:AssumeRole"
            }]
      }'

aws iam put-role-policy --role-name ImageProcessingServiceRole \
      --policy-name SQSDynamoDBPolicy \
      --policy-document file://processing-service-policy.json
```

#### **Create Instance Profiles**
```bash
# Upload Service Instance Profile
aws iam create-instance-profile --instance-profile-name ImageUploadServiceProfile
aws iam add-role-to-instance-profile \
      --instance-profile-name ImageUploadServiceProfile \
      --role-name ImageUploadServiceRole

# Processing Service Instance Profile
aws iam create-instance-profile --instance-profile-name ImageProcessingServiceProfile  
aws iam add-role-to-instance-profile \
      --instance-profile-name ImageProcessingServiceProfile \
      --role-name ImageProcessingServiceRole
```

### 3. **Launch EC2 Instances**

#### **EC2 Instance 1: Image Upload Service**
```bash
aws ec2 run-instances \
      --image-id ami-xxxxxxxxx \
      --instance-type t3.micro \
      --iam-instance-profile Name=ImageUploadServiceProfile \
      --security-groups upload-service-sg \
      --key-name your-key-pair
```

#### **EC2 Instance 2: Image Processing Service**
```bash
aws ec2 run-instances \
      --image-id ami-xxxxxxxxx \
      --instance-type t3.micro \
      --iam-instance-profile Name=ImageProcessingServiceProfile \
      --security-groups processing-service-sg \
      --key-name your-key-pair
```

### 4. **Configure S3 Event Notifications**
- Enable S3 event notifications to publish to SNS topic
- Set trigger for `s3:ObjectCreated:*` events

### 5. **Setup Email Subscription to SNS**
```bash
aws sns subscribe --topic-arn arn:aws:sns:region:account:ImageUploadNotifications \
      --protocol email --notification-endpoint your-email@gmail.com
```

---

‚úÖ **In summary:**  
This system enables **real-time notifications and metadata storage** whenever a user uploads an image, using an **event-driven, scalable architecture** with SNS, SQS, EC2, and DynamoDB.
