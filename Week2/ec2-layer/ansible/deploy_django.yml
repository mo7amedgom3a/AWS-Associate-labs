---
- name: Deploy Django app from GitHub with Docker and configure nginx reverse proxy
  hosts: ec2-instance
  become: yes
  gather_facts: no
  tasks:
    - name: Clean up problematic Docker repository
      raw: |
        sudo yum-config-manager --disable docker-ce-stable || true
        sudo rm -f /etc/yum.repos.d/docker-ce.repo || true
      changed_when: false

    - name: Update yum cache
      raw: sudo yum update -y
      changed_when: false

    - name: Install required packages
      raw: |
        sudo yum install -y yum-utils device-mapper-persistent-data lvm2 curl wget unzip
      changed_when: false

    - name: Install Docker for Amazon Linux
      raw: |
        sudo yum install -y docker
        sudo service docker start
        sudo chkconfig docker on
        sudo groupadd docker || true
        sudo usermod -a -G docker ec2-user
      changed_when: false

    - name: Install Docker Compose
      raw: |
        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
      changed_when: false

    - name: Create application directory
      raw: sudo mkdir -p /opt/django-app && sudo chown ec2-user:ec2-user /opt/django-app
      changed_when: false

    - name: Download project from GitHub
      raw: |
        cd /opt
        wget https://github.com/mo7amedgom3a/AWS-Associate-labs/archive/refs/heads/main.zip
        unzip main.zip
        cp -r AWS-Associate-labs-main/Week2/ec2-layer/django-app/* /opt/django-app/
        rm -rf AWS-Associate-labs-main main.zip
      changed_when: false

    - name: Set proper permissions
      raw: sudo chown -R ec2-user:ec2-user /opt/django-app
      changed_when: false

    - name: Create .env file for Django
      raw: |
        cat > /opt/django-app/.env << 'EOF'
        DEBUG=True
        SECRET_KEY=your-secret-key-here
        DATABASE_URL=postgresql://mohamed:2003@db:5432/users
        ALLOWED_HOSTS=localhost,127.0.0.1,52.55.35.4
        EOF
      changed_when: false

    - name: Build and start Docker containers
      raw: |
        cd /opt/django-app
        sudo docker-compose up -d --build
      changed_when: false

    - name: Wait for containers to be ready
      raw: sleep 45
      changed_when: false

    - name: Run Django migrations
      raw: |
        cd /opt/django-app
        sudo docker-compose exec -T web python manage.py migrate --noinput
      changed_when: false

    - name: Create Django superuser (optional)
      raw: |
        cd /opt/django-app
        echo "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.create_superuser('admin', 'admin@example.com', 'admin123') if not User.objects.filter(username='admin').exists() else None" | sudo docker-compose exec -T web python manage.py shell
      changed_when: false

    - name: Configure nginx as reverse proxy
      raw: |
        sudo tee /etc/nginx/conf.d/django.conf > /dev/null << 'EOF'
        server {
            listen 80;
            server_name 52.55.35.4;

            location / {
                proxy_pass http://127.0.0.1:8000;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_connect_timeout 60s;
                proxy_send_timeout 60s;
                proxy_read_timeout 60s;
            }

            # Health check endpoint
            location /health/ {
                proxy_pass http://127.0.0.1:8000/health/;
                access_log off;
            }
        }
        EOF
      changed_when: false

    - name: Remove default nginx site
      raw: sudo rm -f /etc/nginx/conf.d/default.conf
      changed_when: false

    - name: Test nginx configuration
      raw: sudo nginx -t
      changed_when: false

    - name: Reload nginx
      raw: sudo /etc/init.d/nginx reload
      changed_when: false

    - name: Display Docker containers status
      raw: sudo docker ps
      register: docker_status
      changed_when: false

    - name: Show Docker containers status
      debug:
        var: docker_status.stdout_lines

    - name: Display nginx status
      raw: sudo /etc/init.d/nginx status
      register: nginx_status
      changed_when: false

    - name: Show nginx status
      debug:
        var: nginx_status.stdout_lines 