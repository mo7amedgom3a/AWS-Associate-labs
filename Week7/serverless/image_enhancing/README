# Serverless Image Enhancement Pipeline on AWS

This repository describes and implements a serverless architecture to automatically process (enhance) uploaded images, store related metadata, and notify users when their enhanced image is ready.  
The solution uses **Amazon S3**, **AWS Lambda**, **Amazon DynamoDB**, and **Amazon SNS**, and can be deployed using either the **AWS CLI** or **Terraform**.

---

## üìê Architecture Overview

![Architecture Diagram](architecture_Diagram.png) <!-- Replace with actual diagram path -->

1. **User uploads an image** to an Amazon S3 bucket (raw images).
2. The S3 upload event **triggers an AWS Lambda function**.
3. Lambda:
   - Downloads and processes the uploaded image.
   - Stores **metadata** in Amazon DynamoDB.
   - Uploads the **enhanced image** to another (or the same) S3 bucket.
   - Sends a **notification** to the user via Amazon SNS when the image is ready.
4. **SNS** delivers an email or SMS message to subscribed users.

---

## üõ†Ô∏è Technical Requirements

- **AWS Account** with permissions for:
  - S3 (buckets and event notifications)
  - Lambda (create, update, execute)
  - DynamoDB (create tables, read/write)
  - SNS (create topics, subscriptions)
  - IAM (create roles/policies for Lambda execution)
- **AWS CLI** installed and configured with appropriate credentials  
  [Install Guide](https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.html)
- **Terraform** installed (v1.0 or later)  
  [Install Guide](https://developer.hashicorp.com/terraform/downloads)
- **Image Processing Code** packaged for Lambda (Python, Node.js, etc.)
- **Email address or phone number** to receive SNS notifications.

---

## üöÄ High-Level Implementation Steps

### 1. S3 Buckets
- Create a bucket for raw image uploads.
- Create a bucket (or use the same) for storing enhanced images.
- Enable S3 event notifications to trigger Lambda on `PUT` events.

### 2. Lambda Function
- Write the Lambda code to:
  - Retrieve the uploaded image.
  - Enhance/process the image (using libraries like Pillow for Python).
  - Store metadata in DynamoDB.
  - Upload the enhanced image back to S3.
  - Publish a message to SNS with details (link to enhanced image, etc.).
- Package and deploy the Lambda function with required IAM permissions.

### 3. DynamoDB Table
- Create a DynamoDB table to store image metadata:
  - Primary key: `ImageId` or `FileName`
  - Attributes: `UserId`, `Timestamp`, `Status`, `EnhancedImageURL`, etc.

### 4. SNS Topic
- Create an SNS topic.
- Subscribe user emails or phone numbers to the topic.
- Configure Lambda to publish to this topic.

### 5. IAM Roles and Policies
- Create an IAM role for Lambda with permissions:
  - `s3:GetObject`, `s3:PutObject`
  - `dynamodb:PutItem`
  - `sns:Publish`
- Attach the role to your Lambda function.

---

## ‚öôÔ∏è Deployment Options

### Option A: AWS CLI

1. **Create S3 Buckets**
   ```bash
   aws s3 mb s3://raw-image-bucket
   aws s3 mb s3://enhanced-image-bucket
   ```

2. **Create DynamoDB Table**
   ```bash
   aws dynamodb create-table \
     --table-name ImageMetadata \
     --attribute-definitions AttributeName=ImageId,AttributeType=S \
     --key-schema AttributeName=ImageId,KeyType=HASH \
     --billing-mode PAY_PER_REQUEST
   ```

3. **Create SNS Topic & Subscription**
   ```bash
   aws sns create-topic --name ImageNotifications
   aws sns subscribe --topic-arn <topic-arn> \
     --protocol email --notification-endpoint <your-email>
   ```

4. **Deploy Lambda Function**
   ```bash
   zip function.zip lambda_function.py
   aws lambda create-function \
     --function-name ImageEnhancer \
     --zip-file fileb://function.zip \
     --handler lambda_function.lambda_handler \
     --runtime python3.11 \
     --role <lambda-role-arn>
   ```

5. **Configure S3 Event Notification to trigger Lambda:**
   ```bash
   aws s3api put-bucket-notification-configuration \
     --bucket raw-image-bucket \
     --notification-configuration '{
       "LambdaFunctionConfigurations": [{
         "LambdaFunctionArn": "<lambda-arn>",
         "Events": ["s3:ObjectCreated:*"]
       }]
     }'
   ```

### Option B: Terraform

1. **Initialize Terraform:**
   ```bash
   terraform init
   ```

2. **Provide required variables:**
You must provide an S3 bucket name (globally unique). Optionally, provide an email for SNS subscription.

Example `terraform.tfvars`:
```hcl
region            = "us-east-1"
project_name      = "image-enhancing"
raw_bucket_name   = "your-unique-bucket-name-here"
email_subscription = "you@example.com" # optional
force_destroy_bucket = false
```

3. **Apply the configuration:**
   ```bash
   terraform apply
   ```

4. **Verify resources in the AWS console.**

5. **Test the pipeline:**
```bash
aws s3 cp ./sample.jpg s3://$(terraform output -raw bucket_name)/sample.jpg
```
Watch CloudWatch Logs for the Lambda function and check the `enhanced/` prefix in the same bucket. A DynamoDB item will be created in the table, and an SNS notification will be published (confirm your email subscription first).

6. **Tear down when finished:**
```bash
terraform destroy
```

---

## üì© Notifications

Once the Lambda finishes processing and uploads the enhanced image, it will publish a message to the SNS topic. All subscribers (emails/phone numbers) will receive a notification containing:

- The status of the processed image.
- A link to the enhanced image stored in S3.

---

## üìö References

- [AWS S3 Documentation](https://docs.aws.amazon.com/s3/)
- [AWS Lambda Documentation](https://docs.aws.amazon.com/lambda/)
- [AWS DynamoDB Documentation](https://docs.aws.amazon.com/dynamodb/)
- [AWS SNS Documentation](https://docs.aws.amazon.com/sns/)
- [Terraform AWS Provider](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)
