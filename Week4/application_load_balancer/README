# AWS Application Load Balancer with EC2 Auto Scaling

This document explains how to implement an Application Load Balancer (ALB), an Auto Scaling Group (ASG), and a Launch Template in Amazon Web Services (AWS) based on the reference architecture.

## üìå Architecture Overview
![architecture-diagram](elb-architecture-diagram.png)
The architecture consists of:

- **Virtual Private Cloud (VPC)**: Provides the isolated networking environment.
- **Subnets across multiple Availability Zones (AZs)**: Ensures high availability and fault tolerance.
- **Internet Gateway**: Allows external traffic from the internet.
- **Application Load Balancer (ALB)**: Distributes incoming traffic across multiple EC2 instances.
- **Auto Scaling Group (ASG)**: Manages the scaling of EC2 instances (adds/removes instances based on demand).
- **Launch Template**: Defines instance configuration (AMI, instance type, key pair, security groups, etc.).
- **EC2 Security Group**: Controls inbound and outbound traffic for EC2 instances.

## ‚öôÔ∏è Implementation Steps

### 1. Create a VPC and Subnets or use existing ones

- Go to **VPC Console** ‚Üí **Create VPC**.
- Define:
    - VPC CIDR block (e.g., `10.0.0.0/16`).
    - At least 3 subnets in different Availability Zones (e.g., `10.0.1.0/24`, `10.0.2.0/24`, `10.0.3.0/24`).
- Attach an **Internet Gateway** to the VPC.
- Update route tables to allow internet access.

### 2. Create a Security Group

- Navigate to **EC2** ‚Üí **Security Groups**.
- Create a security group for **EC2 Instances**:
    - **Inbound**: Allow HTTP (80) from the Load Balancer.
    - **Outbound**: Allow all traffic (default).
- Create another security group for the **Load Balancer**:
    - **Inbound**: Allow HTTP (80) from the internet (`0.0.0.0/0`).
    - **Outbound**: Allow traffic to EC2 instance security group.

### 3. Create a Launch Template

- Go to **EC2** ‚Üí **Launch Templates** ‚Üí **Create launch template**.
- Define:
    - **AMI** (Amazon Linux 2 or custom image).
    - **Instance type** (e.g., `t3.micro`).
    - **Key pair** (for SSH access).
    - **Security group** (the EC2 security group created earlier).
    - **User data** (for automatic software installation, e.g., a web server):

    ```bash
    #!/bin/bash
    yum update -y
    yum install -y httpd
    systemctl enable httpd
    systemctl start httpd
    echo "<h1>Welcome to My Auto Scaling App</h1>" > /var/www/html/index.html
    ```

### 4. Create an Auto Scaling Group (ASG)

- Go to **EC2** ‚Üí **Auto Scaling Groups** ‚Üí **Create Auto Scaling group**.
- Select the launch template created earlier.
- Choose subnets from at least two or three Availability Zones.
- Attach to an Application Load Balancer target group.
- Configure desired, minimum, and maximum capacity:
    - **Desired capacity**: 2
    - **Min**: 2
    - **Max**: 4
- Set scaling policies (e.g., scale out when CPU > 50%, scale in when CPU < 50%).

### 5. Create an Application Load Balancer (ALB)

- Go to **EC2** ‚Üí **Load Balancers** ‚Üí **Create Load Balancer** ‚Üí **Application Load Balancer**.
- Choose **internet-facing**.
- Select at least two subnets in different AZs.
- Assign the Load Balancer security group.
- Create a target group:
    - **Target type**: Instances.
    - **Protocol**: HTTP, port 80.
    - Health check path: `/`.
- Register your Auto Scaling Group with the target group.

### 6. Test the Setup

- After setup, copy the DNS name of the ALB (e.g., `http://my-alb-1234567890.us-east-1.elb.amazonaws.com`).
- Open it in a browser.
- The traffic will be routed to EC2 instances across multiple AZs.
- Auto Scaling will add/remove instances automatically based on demand.

## üöÄ Benefits of This Setup

- **High Availability**: Instances run in multiple AZs.
- **Scalability**: Auto Scaling ensures enough capacity for traffic spikes.
- **Load Balancing**: ALB intelligently distributes requests.
- **Fault Tolerance**: If one instance fails, traffic shifts to healthy instances.

## ‚úÖ Conclusion

You now have a scalable, highly available web application architecture using AWS Application Load Balancer, Auto Scaling, and Launch Templates.